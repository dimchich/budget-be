openapi: 3.0.0

info:
  title: 'Budget API'
  version: '0.1.0'
  description: 'Api docs'

tags:
- name: auth
  description: auth API
- name: users
  description: users API
- name: groups
  description: groups API

paths:
  /login:
    post:
      tags:
      - auth
      summary: Logs in and returns the authentication  cookie
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security: []
      responses:
        200:
          description: >
            Successfully authenticated.
            The session ID is returned in a cookie named `Authorization`. You need to include this cookie in subsequent requests.
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: Authorization=abcde12345; HttpOnly; Max-Age=3600;
  /users:
    # [GET] users
    get:
      tags:
      - users
      summary: Find All Users
      security: []
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    # [POST] users
    post:
      tags:
      - users
      summary: Add User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /users/{id}:
    # [GET] users/id
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - in: path
        name: id
        description: User Id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: 'OK'
        404:
          description: 'Not found'
        500:
          description: 'Server Error'

    # [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  /groups:
    # [GET] groups
    get:
      tags:
      - groups
      summary: Find all groups
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server error'
    # [POST] groups
    post:
      tags:
      - groups
      summary: Add group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad request'

  /groups/{id}:
    # [GET] groups/id
    get:
      tags:
      - groups
      summary: Find group by Id
      parameters:
      - name: id
        in: path
        description: Group id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: 'OK'
        404:
          description: 'Not found'

    # [PUT] groups/id
    put:
      tags:
      - groups
      summary: Update group by Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupDto'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad request'
        404:
          description: 'Not found'
      
    # [DELETE] groups/id
    delete:    
      tags:
      - groups
      summary: Delete group by Id
      parameters:
      - name: id
        in: path
        description: Group id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: 'OK'
        404:
          description: 'Not found'


components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: Authorization

  schemas:
    # Auth
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: user Email
        password:
          type: string
          description: user Password
    # Users
    UserCreate:
      type: object
      required:
        - email
        - name
        - password
      properties:
        email:
          type: string
          description: user Email
        name:
          type: string
          description: user Name
        password:
          type: string
          description: user Password
    UserDto:
      type: object
      required:
          - email
          - password
      properties:
        id:
          type: integer
          description: user Id
        email:
          type: string
          description: user Email
        name:
          type: string
          description: user Name
    # Groups
    GroupCreate:
      type: object
      required:
        - name
        - author
      properties:
        name:
          type: string
          description: group Name
        author:
          type: integer
          description: author Id
    GroupDto:
      type: object
      required:
        - name
        - authorId
      properties:
        id:
          type: integer
          description: group Id
        name:
          type: string
          description: group Name
        authorId:
          type: integer
          description: author Id

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid